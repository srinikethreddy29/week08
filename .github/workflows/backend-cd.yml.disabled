name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: '<aks_cluster_name>'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: '<resource_group_name>'
      aks_acr_name:
        description: 'Name of ACR'
        required: true
        default: '<acr_name>'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    env:
      NS: week08
      ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group ${{ github.event.inputs.aks_resource_group }} \
            --name ${{ github.event.inputs.aks_cluster_name }} \
            --overwrite-existing

      - name: Ensure namespace exists
        run: kubectl get ns "$NS" || kubectl create ns "$NS"

      - name: Create imagePullSecret for ACR
        run: |
          kubectl create secret docker-registry acr-creds \
            --docker-server="${{ env.ACR_LOGIN_SERVER }}" \
            --docker-username="${{ secrets.ACR_USERNAME }}" \
            --docker-password="${{ secrets.ACR_PASSWORD }}" \
            -n "$NS" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Patch default service account to use acr-creds
        run: |
          kubectl patch serviceaccount default -n "$NS" \
            -p '{"imagePullSecrets":[{"name":"acr-creds"}]}' || true

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          kubectl -n "$NS" apply -f k8s/configmaps.yaml
          kubectl -n "$NS" apply -f k8s/secrets.yaml
          kubectl -n "$NS" apply -f k8s/product-db.yaml
          kubectl -n "$NS" apply -f k8s/order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          kubectl -n "$NS" apply -f k8s/product-service.yaml
          kubectl -n "$NS" apply -f k8s/order-service.yaml

      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting up to 5 minutes for service IPs..."
          for i in $(seq 1 60); do
            PRODUCT_IP=$(kubectl -n "$NS" get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl -n "$NS" get svc order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "Product Service IP: $PRODUCT_IP"
              echo "Order Service IP:   $ORDER_IP"
              echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV
              break
            fi
            sleep 5
          done
          test -n "$PRODUCT_IP" && test -n "$ORDER_IP"

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout
